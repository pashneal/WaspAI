!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
ANT	constants.h	/^	ANT,$/;"	e	enum:PieceName
BEETLE	constants.h	/^	BEETLE,$/;"	e	enum:PieceName
BITBOARD_CONTAINER_COLS	Bitboard.h	/^	const int BITBOARD_CONTAINER_COLS = 4;$/;"	m	class:BitboardContainer	typeref:typename:const int
BITBOARD_CONTAINER_ROWS	Bitboard.h	/^	const int BITBOARD_CONTAINER_ROWS = 4;$/;"	m	class:BitboardContainer	typeref:typename:const int
BITBOARD_CONTAINER_SIZE	Bitboard.h	/^	const int BITBOARD_CONTAINER_SIZE  = 16;$/;"	m	class:BitboardContainer	typeref:typename:const int
BITBOARD_HEIGHT	Bitboard.h	/^	const int BITBOARD_HEIGHT = 8;$/;"	m	class:BitboardContainer	typeref:typename:const int
BITBOARD_WIDTH	Bitboard.h	/^	const int BITBOARD_WIDTH = 8;$/;"	m	class:BitboardContainer	typeref:typename:const int
BitBoardShiftX	Hive.h	/^	int BitBoardShiftX = 0;$/;"	m	class:Hive	typeref:typename:int
BitBoardShiftY	Hive.h	/^	int BitBoardShiftY = 0;$/;"	m	class:Hive	typeref:typename:int
BitboardContainer	Bitboard.cpp	/^BitboardContainer::BitboardContainer(unordered_map<int, unsigned long long > predefinedBoards){$/;"	f	class:BitboardContainer
BitboardContainer	Bitboard.h	/^	BitboardContainer() {};$/;"	f	class:BitboardContainer
BitboardContainer	Bitboard.h	/^class BitboardContainer {$/;"	c
BitboardTest	Test.h	/^		class BitboardTest {$/;"	c	class:Test
CENTER_X	Hive.h	/^	static const int CENTER_X = 23;$/;"	m	class:Hive	typeref:typename:const int
CENTER_Y	Hive.h	/^	static const int CENTER_Y = 11;$/;"	m	class:Hive	typeref:typename:const int
COLUMN_SHIFT	Bitboard.h	/^	const int COLUMN_SHIFT = 1;$/;"	m	class:BitboardContainer	typeref:typename:const int
Direction	constants.h	/^enum Direction{$/;"	g
E	constants.h	/^	E = 1,$/;"	e	enum:Direction
GRASSHOPPER	constants.h	/^	GRASSHOPPER=0,$/;"	e	enum:PieceName
Hive	Hive.cpp	/^Hive::Hive() { $/;"	f	class:Hive
Hive	Hive.h	/^class Hive {$/;"	c
HiveTest	Test.h	/^		class HiveTest {$/;"	c	class:Test
LADYBUG	constants.h	/^	LADYBUG,$/;"	e	enum:PieceName
MOSQUITO	constants.h	/^	MOSQUITO,$/;"	e	enum:PieceName
MoveGenerator	MoveGenerator.h	/^		MoveGenerator() {};$/;"	f	class:MoveGenerator
MoveGenerator	MoveGenerator.h	/^class MoveGenerator {$/;"	c
N	constants.h	/^	N = -1,$/;"	e	enum:Direction
NE	constants.h	/^	NE = 0,$/;"	e	enum:Direction
NW	constants.h	/^	NW = 5,$/;"	e	enum:Direction
PILLBUG	constants.h	/^	PILLBUG,$/;"	e	enum:PieceName
Piece	Piece.cpp	/^Piece::Piece(char pieceColor, string shorthand, int xPos, int yPos) {$/;"	f	class:Piece
Piece	Piece.h	/^	Piece() {};$/;"	f	class:Piece
Piece	Piece.h	/^class Piece {$/;"	c
PieceName	constants.h	/^enum PieceName{$/;"	g
PieceNode	PieceNode.cpp	/^PieceNode::PieceNode(int pieceNum, BitboardContainer b) { $/;"	f	class:PieceNode
PieceNode	PieceNode.h	/^		PieceNode() {};$/;"	f	class:PieceNode
PieceNode	PieceNode.h	/^class PieceNode {$/;"	c
PieceTest	Test.h	/^		class PieceTest {$/;"	c	class:Test
QUEEN	constants.h	/^	QUEEN,$/;"	e	enum:PieceName
ROW_SHIFT	Bitboard.h	/^	const int ROW_SHIFT = 8;$/;"	m	class:BitboardContainer	typeref:typename:const int
S	constants.h	/^	S = -2$/;"	e	enum:Direction
SE	constants.h	/^	SE = 2,$/;"	e	enum:Direction
SPIDER	constants.h	/^	SPIDER$/;"	e	enum:PieceName
SW	constants.h	/^	SW = 3,$/;"	e	enum:Direction
Test	Test.h	/^class Test {$/;"	c
W	constants.h	/^	W = 4,$/;"	e	enum:Direction
WaspAI	README.md	/^# WaspAI$/;"	c
allGates	MoveGenerator.h	/^		vector <BitboardContainer> * allGates;$/;"	m	class:MoveGenerator	typeref:typename:vector<BitboardContainer> *
allPieces	Hive.h	/^	BitboardContainer allPieces;$/;"	m	class:Hive	typeref:typename:BitboardContainer
allPieces	MoveGenerator.h	/^		BitboardContainer * allPieces;$/;"	m	class:MoveGenerator	typeref:typename:BitboardContainer *
antiGates	Bitboard.cpp	/^BitboardContainer antiGates[] = {$/;"	v	typeref:typename:BitboardContainer[]
ants	Hive.h	/^	BitboardContainer ants;$/;"	m	class:Hive	typeref:typename:BitboardContainer
articulationNodes	Hive.h	/^	vector <PieceNode*> articulationNodes;$/;"	m	class:Hive	typeref:typename:vector<PieceNode * >
beetles	Hive.h	/^	BitboardContainer beetles;$/;"	m	class:Hive	typeref:typename:BitboardContainer
bitboard	Piece.h	/^	int bitboard;$/;"	m	class:Piece	typeref:typename:int
bitboard	PieceNode.h	/^		BitboardContainer bitboard;$/;"	m	class:PieceNode	typeref:typename:BitboardContainer
blackPieces	Hive.h	/^	BitboardContainer blackPieces;$/;"	m	class:Hive	typeref:typename:BitboardContainer
boardNumber	Piece.h	/^	int boardNumber;$/;"	m	class:Piece	typeref:typename:int
boundingBoxes	Bitboard.h	/^	int  boundingBoxes[16][4];$/;"	m	class:BitboardContainer	typeref:typename:int[16][4]
clear	Bitboard.cpp	/^void BitboardContainer::clear() {$/;"	f	class:BitboardContainer	typeref:typename:void
color	Piece.h	/^	char color;$/;"	m	class:Piece	typeref:typename:char
depthFirstSearch	Hive.cpp	/^void Hive::depthFirstSearch(){$/;"	f	class:Hive	typeref:typename:void
directions	Test.cpp	/^ unordered_map < string , vector<Direction> > directions = $/;"	v	typeref:typename:unordered_map<string,vector<Direction>>
doors	Hive.h	/^	BitboardContainer doors;$/;"	m	class:Hive	typeref:typename:BitboardContainer
duplicateBoard	Bitboard.cpp	/^unordered_map<int, unsigned long long> BitboardContainer::duplicateBoard(vector <Direction> dirs/;"	f	class:BitboardContainer	typeref:typename:unordered_map<int,unsigned long long>
dxdy	Test.cpp	/^ int dxdy[6][2] = {{1,1},$/;"	v	typeref:typename:int[6][2]
equals	Bitboard.cpp	/^bool BitboardContainer::equals(BitboardContainer& other){$/;"	f	class:BitboardContainer	typeref:typename:bool
findAllGates	Bitboard.cpp	/^void BitboardContainer::findAllGates(BitboardContainer &result ){$/;"	f	class:BitboardContainer	typeref:typename:void
findBoundingBoxes	Bitboard.cpp	/^void BitboardContainer::findBoundingBoxes(){$/;"	f	class:BitboardContainer	typeref:typename:void
findBoundingBoxes	Bitboard.cpp	/^void BitboardContainer::findBoundingBoxes(int boardIndex){$/;"	f	class:BitboardContainer	typeref:typename:void
findGatesContainingPiece	Bitboard.cpp	/^void BitboardContainer::findGatesContainingPiece(BitboardContainer &result,$/;"	f	class:BitboardContainer	typeref:typename:void
firstPieces	Hive.h	/^	BitboardContainer firstPieces;$/;"	m	class:Hive	typeref:typename:BitboardContainer
floodFill	Bitboard.cpp	/^void BitboardContainer::floodFill(BitboardContainer &frontier){$/;"	f	class:BitboardContainer	typeref:typename:void
floodFillStep	Bitboard.cpp	/^void BitboardContainer::floodFillStep(BitboardContainer &frontier,  BitboardContainer &visited){$/;"	f	class:BitboardContainer	typeref:typename:void
gates	Bitboard.cpp	/^BitboardContainer gates[] = {$/;"	v	typeref:typename:BitboardContainer[]
gates	Hive.h	/^	BitboardContainer gates;$/;"	m	class:Hive	typeref:typename:BitboardContainer
generateAntMoves	MoveGenerator.cpp	/^void MoveGenerator::generateAntMoves(){$/;"	f	class:MoveGenerator	typeref:typename:void
generateBeetleMoves	MoveGenerator.cpp	/^void MoveGenerator::generateBeetleMoves(){}  $/;"	f	class:MoveGenerator	typeref:typename:void
generateGrasshopperMoves	MoveGenerator.cpp	/^void MoveGenerator::generateGrasshopperMoves(){$/;"	f	class:MoveGenerator	typeref:typename:void
generateLadybugMoves	MoveGenerator.cpp	/^void MoveGenerator::generateLadybugMoves(){} $/;"	f	class:MoveGenerator	typeref:typename:void
generateMosquitoMoves	MoveGenerator.cpp	/^void MoveGenerator::generateMosquitoMoves(){}$/;"	f	class:MoveGenerator	typeref:typename:void
generateMoves	MoveGenerator.cpp	/^void MoveGenerator::generateMoves() {$/;"	f	class:MoveGenerator	typeref:typename:void
generatePillbugMoves	MoveGenerator.cpp	/^void MoveGenerator::generatePillbugMoves(){} $/;"	f	class:MoveGenerator	typeref:typename:void
generateQueenMoves	MoveGenerator.cpp	/^void MoveGenerator::generateQueenMoves(){}   $/;"	f	class:MoveGenerator	typeref:typename:void
generateSpiderMoves	MoveGenerator.cpp	/^void MoveGenerator::generateSpiderMoves(){}  $/;"	f	class:MoveGenerator	typeref:typename:void
generatingPieceBoard	MoveGenerator.h	/^		BitboardContainer * generatingPieceBoard;$/;"	m	class:MoveGenerator	typeref:typename:BitboardContainer *
generatingPieceName	MoveGenerator.h	/^		PieceName * generatingPieceName;$/;"	m	class:MoveGenerator	typeref:typename:PieceName *
getArticulationNodes	Hive.cpp	/^void Hive::getArticulationNodes(PieceNode &n, int &counter) {$/;"	f	class:Hive	typeref:typename:void
getInaccessibleNodes	MoveGenerator.cpp	/^BitboardContainer MoveGenerator::getInaccessibleNodes() {$/;"	f	class:MoveGenerator	typeref:typename:BitboardContainer
getMoves	MoveGenerator.cpp	/^unordered_map< int, vector <unsigned long long>> MoveGenerator::getMoves() {	$/;"	f	class:MoveGenerator	typeref:typename:unordered_map<int,vector<unsigned long long>>
getPerimeter	Bitboard.cpp	/^BitboardContainer  BitboardContainer::getPerimeter() {$/;"	f	class:BitboardContainer	typeref:typename:BitboardContainer
getPiece	Hive.cpp	/^Piece * Hive::getPiece(char color, string shorthandName){$/;"	f	class:Hive	typeref:typename:Piece *
getPiece	Hive.cpp	/^Piece * Hive::getPiece(int pieceNumber) {$/;"	f	class:Hive	typeref:typename:Piece *
getPieceArray	Hive.cpp	/^Piece * Hive::getPieceArray(){$/;"	f	class:Hive	typeref:typename:Piece *
getPieceLookupSet	Hive.cpp	/^set<int> Hive::getPieceLookupSet(){$/;"	f	class:Hive	typeref:typename:set<int>
getPieceLookupTable	Hive.cpp	/^bool * Hive::getPieceLookupTable(){$/;"	f	class:Hive	typeref:typename:bool *
grasshoppers	Hive.h	/^	BitboardContainer grasshoppers;$/;"	m	class:Hive	typeref:typename:BitboardContainer
initialize	Bitboard.cpp	/^void BitboardContainer::initialize(unordered_map < int, unsigned long long> predefinedBoards) {$/;"	f	class:BitboardContainer	typeref:typename:void
initializeTo	Bitboard.cpp	/^void BitboardContainer::initializeTo(BitboardContainer &other) {$/;"	f	class:BitboardContainer	typeref:typename:void
insert	PieceNode.cpp	/^void PieceNode::insert( list <PieceNode> &newNeighbors, BitboardContainer &newBitboard) {$/;"	f	class:PieceNode	typeref:typename:void
insertPiece	Hive.cpp	/^void Hive::insertPiece(Piece piece){$/;"	f	class:Hive	typeref:typename:void
insertPiece	Hive.cpp	/^void Hive::insertPiece(char pieceColor, string shorthandName,$/;"	f	class:Hive	typeref:typename:void
insertPieceTest	Test.cpp	/^void Test::HiveTest::insertPieceTest() {$/;"	f	class:Test::HiveTest	typeref:typename:void
internalBoardCache	Bitboard.h	/^	set<int> internalBoardCache;$/;"	m	class:BitboardContainer	typeref:typename:set<int>
intersectionWith	Bitboard.cpp	/^void BitboardContainer::intersectionWith( BitboardContainer &other) {$/;"	f	class:BitboardContainer	typeref:typename:void
isEmpty	PieceNode.h	/^		bool isEmpty = true;$/;"	m	class:PieceNode	typeref:typename:bool
ladybugs	Hive.h	/^	BitboardContainer ladybugs;$/;"	m	class:Hive	typeref:typename:BitboardContainer
lowLink	PieceNode.h	/^		int lowLink;$/;"	m	class:PieceNode	typeref:typename:int
main	Test.cpp	/^int main() {$/;"	f	typeref:typename:int
main	main.cpp	/^int main() {$/;"	f	typeref:typename:int
mosquitoes	Hive.h	/^	BitboardContainer mosquitoes;$/;"	m	class:Hive	typeref:typename:BitboardContainer
movePiece	Hive.cpp	/^void Hive::movePiece(char color, string shorthandName, bool right,$/;"	f	class:Hive	typeref:typename:void
movePiece	Hive.cpp	/^void Hive::movePiece(char color, string shorthandName,$/;"	f	class:Hive	typeref:typename:void
movePiece	Hive.cpp	/^void Hive::movePiece(int piece1Int, Direction dir ,int piece2Int){$/;"	f	class:Hive	typeref:typename:void
movePieceTest	Test.cpp	/^void Test::HiveTest::movePieceTest(){$/;"	f	class:Test::HiveTest	typeref:typename:void
moves	MoveGenerator.h	/^		BitboardContainer moves;$/;"	m	class:MoveGenerator	typeref:typename:BitboardContainer
name	Piece.h	/^	string name;$/;"	m	class:Piece	typeref:typename:string
neighbors	PieceNode.h	/^		list <PieceNode*> neighbors;	$/;"	m	class:PieceNode	typeref:typename:list<PieceNode * >
numDirections	Bitboard.cpp	/^int numDirections = 6;$/;"	v	typeref:typename:int
overflowLocation	Bitboard.cpp	/^unordered_map <Direction, vector<int>> overflowLocation =$/;"	v	typeref:typename:unordered_map<Direction,vector<int>>
parent	PieceNode.h	/^		PieceNode * parent;$/;"	m	class:PieceNode	typeref:typename:PieceNode *
parseCommand	Hive.cpp	/^bool Hive::parseCommand(vector<string> command){$/;"	f	class:Hive	typeref:typename:bool
parseCommandTest	Test.cpp	/^void Test::HiveTest::parseCommandTest(){$/;"	f	class:Test::HiveTest	typeref:typename:void
pass	Test.cpp	/^void Test::pass(bool testPassed, string message){$/;"	f	class:Test	typeref:typename:void
perimeter	MoveGenerator.h	/^		BitboardContainer perimeter;$/;"	m	class:MoveGenerator	typeref:typename:BitboardContainer
pieceArray	Hive.h	/^	Piece pieceArray[28];$/;"	m	class:Hive	typeref:typename:Piece[28]
pieceInHive	Hive.cpp	/^bool Hive::pieceInHive(char color, string shorthandName) {$/;"	f	class:Hive	typeref:typename:bool
pieceInHive	Hive.cpp	/^bool Hive::pieceInHive(int pieceNum) {$/;"	f	class:Hive	typeref:typename:bool
pieceLookupSet	Hive.h	/^	set<int> pieceLookupSet;$/;"	m	class:Hive	typeref:typename:set<int>
pieceLookupTable	Hive.h	/^	bool pieceLookupTable[28];$/;"	m	class:Hive	typeref:typename:bool[28]
pieceName	Piece.cpp	/^unordered_map<string , string> pieceName = {{"Q","queen"},$/;"	v	typeref:typename:unordered_map<string,string>
pieceNodes	Hive.h	/^	list <PieceNode*> pieceNodes; $/;"	m	class:Hive	typeref:typename:list<PieceNode * >
pieceNum	Test.cpp	/^ unordered_map <string, int> pieceNum = {{"Q",0},$/;"	v	typeref:typename:unordered_map<string,int>
pieceNumber	Hive.cpp	/^int Hive::pieceNumber(Piece piece){$/;"	f	class:Hive	typeref:typename:int
pieceNumber	Hive.cpp	/^int Hive::pieceNumber(char color, string shorthandName) {$/;"	f	class:Hive	typeref:typename:int
pieceNumber	PieceNode.h	/^		int pieceNumber;$/;"	m	class:PieceNode	typeref:typename:int
pillbugs	Hive.h	/^	BitboardContainer pillbugs;$/;"	m	class:Hive	typeref:typename:BitboardContainer
print	Hive.cpp	/^void Hive::print() {$/;"	f	class:Hive	typeref:typename:void
printDebug	Hive.cpp	/^void Hive::printDebug() {$/;"	f	class:Hive	typeref:typename:void
pruneCache	Bitboard.cpp	/^void BitboardContainer::pruneCache(){$/;"	f	class:BitboardContainer	typeref:typename:void
queens	Hive.h	/^	BitboardContainer queens;$/;"	m	class:Hive	typeref:typename:BitboardContainer
reposition	PieceNode.cpp	/^void PieceNode::reposition(list <PieceNode> &newNeighbors, BitboardContainer &newBitboard){$/;"	f	class:PieceNode	typeref:typename:void
rings	Hive.h	/^	BitboardContainer rings;$/;"	m	class:Hive	typeref:typename:BitboardContainer
secondPieces	Hive.h	/^	BitboardContainer secondPieces;$/;"	m	class:Hive	typeref:typename:BitboardContainer
setAllGates	MoveGenerator.cpp	/^void MoveGenerator::setAllGates( vector <BitboardContainer> * p){$/;"	f	class:MoveGenerator	typeref:typename:void
shiftDirection	Bitboard.cpp	/^void BitboardContainer::shiftDirection(Direction dir){$/;"	f	class:BitboardContainer	typeref:typename:void
shiftDirection	Bitboard.cpp	/^void BitboardContainer::shiftDirection(Direction dir, int numTimes){$/;"	f	class:BitboardContainer	typeref:typename:void
shiftDirection	PieceNode.cpp	/^void PieceNode::shiftDirection(Direction dir) {$/;"	f	class:PieceNode	typeref:typename:void
shiftDirection	PieceNode.cpp	/^void PieceNode::shiftDirection(Direction dir, int numTimes) {$/;"	f	class:PieceNode	typeref:typename:void
shorthandName	Piece.h	/^	string shorthandName;$/;"	m	class:Piece	typeref:typename:string
silent	Test.cpp	/^bool Test::silent = false;$/;"	m	class:Test	typeref:typename:bool
silent	Test.h	/^		static bool silent;$/;"	m	class:Test	typeref:typename:bool
spiders	Hive.h	/^	BitboardContainer spiders;$/;"	m	class:Hive	typeref:typename:BitboardContainer
split	Bitboard.cpp	/^unordered_map< int, vector < unsigned long long >> BitboardContainer::split(){$/;"	f	class:BitboardContainer	typeref:typename:unordered_map<int,vector<unsigned long long>>
splitIntoConnectedComponents	Bitboard.cpp	/^vector <BitboardContainer> BitboardContainer::splitIntoConnectedComponents(){$/;"	f	class:BitboardContainer	typeref:typename:vector<BitboardContainer>
testBitboardBoundings	Test.cpp	/^void Test::BitboardTest::testBitboardBoundings(){$/;"	f	class:Test::BitboardTest	typeref:typename:void
testShiftDirection	Test.cpp	/^void Test::BitboardTest::testShiftDirection(){$/;"	f	class:Test::BitboardTest	typeref:typename:void
thirdPieces	Hive.h	/^	BitboardContainer thirdPieces;$/;"	m	class:Hive	typeref:typename:BitboardContainer
turnCounter	Hive.h	/^	int turnCounter = 0;$/;"	m	class:Hive	typeref:typename:int
unionWith	Bitboard.cpp	/^void BitboardContainer::unionWith( BitboardContainer &other){$/;"	f	class:BitboardContainer	typeref:typename:void
updateArticulationFramework	Hive.cpp	/^void Hive::updateArticulationFramework(vector <PieceNode*> &affectedNodes){$/;"	f	class:Hive	typeref:typename:void
visited	PieceNode.h	/^		bool visited = false;$/;"	m	class:PieceNode	typeref:typename:bool
visitedNum	PieceNode.h	/^		int visitedNum;$/;"	m	class:PieceNode	typeref:typename:int
whitePieces	Hive.h	/^	BitboardContainer whitePieces;$/;"	m	class:Hive	typeref:typename:BitboardContainer
x	Piece.h	/^	int x;$/;"	m	class:Piece	typeref:typename:int
xorWith	Bitboard.cpp	/^void BitboardContainer::xorWith( BitboardContainer &other) {$/;"	f	class:BitboardContainer	typeref:typename:void
y	Piece.h	/^	int y;$/;"	m	class:Piece	typeref:typename:int
